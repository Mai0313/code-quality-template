# ================== #
#        Yapf        #
# ================== #

[tool.yapfignore.style]
based_on_style = "google"
column_limit = 208
spaces_before_comment = 4
split_before_logical_operator = false

[tool.yapfignore]
ignore_patterns = ["*.sql", "data/*", "logs/*", "docs/*", "build/*", "dist/*", "assets/*", "tests/*", "test/*", "test_dat"]

# ================== #
#        RUFF        #
# ================== #
[tool.ruff]

# Enable Auto Fixing.
fix = true

# Enumerate all fixed violations.
show-fixes = true

# By default, always show source code snippets.
show-source = true

# Allow imports relative to the "src" and "test" directories.
src = ["."]

task-tags = ["TODO", "FIXME", "BUG", "XXX", "REFACT", "NOTE", "MARK", "HACK"]

# Assume Python 3.9.*
target-version = "py39"

# Set the cache directory to `logs/ruff_cache`.
cache-dir = "~/.cache/ruff"  # default: ".ruff_cache", now it is not allowed to create cache dir in logs

# Group violations by containing file.
# This is output message format; nothing about coding
# Options: ["text" | "json" | "junit" | "github" | "gitlab" | "pylint" | "azure"]
format = "pylint"

# Same as Google Python Style Guide.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Allow autofix for all enabled rules (when `--fix`) is provided.
# Ref: https://beta.ruff.rs/docs/rules/#ruff-specific-rules-ruf
fixable = ["ALL"]
unfixable = []

# In addition to the standard set of exclusions, omit all tests, plus a specific file.
extend-exclude = ["logs", "data", "*.sql", "__init__.py", "*.svg"]

# In addition to the standard set of inclusions, include `.pyw` files.
extend-include = ["*.ipynb", ".sh"]

select = [
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # mccabe
    "C",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-async
    "ASYNC",
    # flake8-print
    "T",
    # flask8-import-conventions
    "ICN",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-future-annotations
    "FA",
    # isort
    "I",
    # NumPy-specific rules
    "NPY",
    # Perflint
    "PERF",
    # Ruff-specific rules (RUF)
    "RUF",
    # "INP", "RET", "DTZ", "PD", "S", "BLE", "PT", "PL"
    ]

ignore = [
    # pycodestyle
    "E101", "E203", "E402", "E501", "W505",
    # pyflakes
    "F811", "F841",
    # mccabe
    "C901",
    # Docstring Related
    "D100", "D101", "D102", "D107", "D103", "D104",
    # No need to Fix
    "ANN", "N", "PTH123", "ARG001", "ARG002", "A001", "ERA", "SIM114", "DTZ005", "DTZ006", "DTZ007", "DTZ011", "PD011", "S301", "S324", "S608", "S311",
    "BLE001",
    # FIXME
    "RET505", "PD010",
    "B006", "FBT002", "SIM108", "RET503", "INP", "PL",
    ]

ignore-init-module-imports = true

[tool.ruff.pycodestyle]
# Ignore long comments for TODO, FIXME, XXX
ignore-overlong-task-comments = true
max-doc-length = 120

[tool.ruff.pydocstyle]
# Use Google-style docstrings.
# Accepts: "google", "numpy", or "pep257".
convention = "google"

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.per-file-ignores]
# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
"__init__.py" = ["E402"]

[tool.ruff.isort]
combine-as-imports = true
force-single-line = false

# ================== #
#    Interrogate     #
# ================== #

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = true
ignore-nested-functions = true
ignore-nested-classes = true
ignore-setters = false
fail-under = 100
exclude = ["pages", "setup.py", "docs", "build", "*.sql"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 2
quiet = false
whitelist-regex = []
color = true
omit-covered-files = true
# generate-badge = "./assets/interrogate_badge.svg"
generate-badge = "./assets/interrogate_badge.svg"
badge-format = "svg"
