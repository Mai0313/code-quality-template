# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Publish Docker image

on:
  push:
    branches:
      - master
    tags:
      - v*

permissions: write-all

jobs:
  build_base_images:
    name: Build and Push Base Images
    runs-on: ubuntu-latest
    # container: catthehacker/ubuntu:act-20.04  # Uncomment it if you use it on Gitea

    strategy:
      fail-fast: true
      max-parallel: 3
      matrix:
        target:
          - name: Build and Push Image (Base)
            target_step: repo_base
            tag: ${{ vars.IMAGE }}-base
            build_args: --build-arg PYTHON_VERSION=3.10.14

          - name: Build and Push Image (Develop Base)
            target_step: repo_dev_base
            tag: ${{ vars.IMAGE }}-dev-base
            build_args: --build-arg PYTHON_VERSION=3.10.14

          - name: Build and Push Images (Latest)
            target_step: repo
            tag: ${{ vars.IMAGE }}
            build_args: --build-arg PYTHON_VERSION=3.10.14

          - name: Build and Push Images (Release)
            target_step: repo
            tag: ${{ vars.IMAGE }}
            build_args: --build-arg PYTHON_VERSION=3.10.14

    steps:
      - name: Disable SSL Verify
        run: git config --global http.sslVerify false

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1
          submodules: 'recursive'

      - name: Login to the Container registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Base Image
        if: github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v5.1.0
        with:
          push: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: ./docker/Dockerfile
          build-args: ${{ matrix.target.build_args }}
          target: ${{ matrix.target.target_step }}
          tags: ${{ matrix.target.tag }}:latest
          sbom: false
          provenance: false

      - name: Get the version
        if: github.ref == 'refs/tags/v*'
        id: metadata
        run: echo ::set-output name=version::${GITHUB_REF#refs/tags/v}

      - name: Build and Push Base Image
        if: github.ref == 'refs/tags/v*'
        uses: docker/build-push-action@v5.1.0
        with:
          push: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: ./docker/Dockerfile
          build-args: ${{ matrix.target.build_args }}
          target: ${{ matrix.target.target_step }}
          tags: ${{ matrix.target.tag }}:${{ steps.metadata.outputs.version }}
          sbom: false
          provenance: false

  # build_package:
  #   name: Build Executable File
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   runs-on: windows-latest

  #   steps:
  #     - name: Disable SSL Verify
  #       run: git config --global http.sslVerify false

  #     - name: Checkout
  #       uses: actions/checkout@v4.1.2
  #       with:
  #         fetch-depth: 0

  #     - name: Set up Python
  #       uses: actions/setup-python@v5.1.0
  #       with:
  #         python-version: '3.10'
  #         token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.lock
  #         pip install pyinstaller

  #     - name: Packaging to Executable file
  #       run: |
  #         pyinstaller -F bot.py --onefile -n line_bot
  #         pyinstaller -F run_ngrok.py --onefile -n ngrok_server

  #     - name: Move and Rename
  #       shell: pwsh
  #       run: |
  #         Copy-Item -Path ./configs -Destination ./dist/ -Recurse
  #         Copy-Item -Path ./binaries -Destination ./dist/ -Recurse

  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v4.3.3
  #       with:
  #         path: ./dist/*
  #         name: ${{ github.event.repository.name }}
  #         if-no-files-found: ignore
  #         retention-days: 90
  #         compression-level: 6
  #         overwrite: true

  # upload_artifacts:
  #   name: Upload Release Assets
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   needs: build_package
  #   runs-on: ubuntu-latest
  #   # container: catthehacker/ubuntu:act-20.04  # Uncomment it if you use it on Gitea

  #   steps:
  #     - name: Download Artifact
  #       uses: actions/download-artifact@v4
  #       if: startsWith(github.ref, 'refs/tags/v')
  #       with:
  #         name: ${{ github.event.repository.name }}

  #     - name: Check Files
  #       run: |
  #         cd ..
  #         zip -r ${{ github.event.repository.name }}.zip ${{ github.event.repository.name }}
  #         ls -al
  #         cp -R ${{ github.event.repository.name }}.zip ./${{ github.event.repository.name }}/

  #     - name: Upload Release Assets
  #       uses: softprops/action-gh-release@v2
  #       if: startsWith(github.ref, 'refs/tags/v')
  #       # continue-on-error: true
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         name: ${{ steps.drafter.outputs.name }}
  #         tag_name: ${{ steps.drafter.outputs.tag_name }}
  #         files: |
  #           ${{ github.event.repository.name }}.zip
