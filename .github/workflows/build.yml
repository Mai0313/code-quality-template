name: build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

# on:
#   push:
#     # branches to consider in the event; optional, defaults to all
#     branches:
#       - master
#   # # pull_request event is required only for autolabeler
#   # pull_request:
#   #   # Only following types are handled by the action, but one can default to all as well
#   #   types: [opened, reopened, synchronize]
#   # pull_request_target event is required for autolabeler to support PRs from forks
#   # pull_request_target:
#   #   types: [opened, reopened, synchronize]

env:
  REQUIREMENTS_FILE: requirements_build.txt
  PYINSTALLER_FILE: main.py
  ARTIFACT_NAME: main

permissions:
  contents: read

jobs:
  build:
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest']

    steps:
      - name: Disable SSL Verify
        run: git config --global http.sslVerify false

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          # Enable these three lines if you run on act
          token: ${{ secrets.GITHUB_TOKEN }}
          cache: 'pip'

      - name: Check if ${{ env.REQUIREMENTS_FILE }} exists
        id: checkfile
        run: |
          file_exists=false
          if [ "${{ runner.os }}" == "Linux" ] && [ -f ${{ env.REQUIREMENTS_FILE }} ]; then
            file_exists=true
          elif [ "${{ runner.os }}" == "Windows" ] && (Test-Path "${{ env.REQUIREMENTS_FILE }}"); then
            file_exists=true
          fi
          if [ $file_exists == true ]; then
            echo "${{ env.REQUIREMENTS_FILE }} exists, proceeding to build."
            echo "::set-output name=exists::true"
          else
            echo "No ${{ env.REQUIREMENTS_FILE }} to build."
            echo "::set-output name=exists::false"
          fi
        shell: bash

      - name: build exe
        if: steps.checkfile.outputs.exists == 'true'
        run: |
          pip install -r ${{ env.REQUIREMENTS_FILE }}
          pyinstaller --onefile ${{ env.PYINSTALLER_FILE }} -n ${{ env.ARTIFACT_NAME }}_${{ runner.os }}

      # Optionally verify that it works (provided that it does not need user interaction)
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        if: steps.checkfile.outputs.exists == 'true'
        with:
          name: ${{ env.ARTIFACT_NAME }}_${{ runner.os }}
          path: dist/*

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_id }}
          release_name: Release ${{ github.run_id }}
          draft: true
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        if: steps.checkfile.outputs.exists == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/${{ env.ARTIFACT_NAME }}_${{ runner.os }}${{ runner.os == 'Windows' && '.exe' || '' }}
          asset_name: ${{ env.ARTIFACT_NAME }}_${{ runner.os }}${{ runner.os == 'Windows' && '.exe' || '' }}
          asset_content_type: application/octet-stream

      - name: Draft Release
        uses: release-drafter/release-drafter@v5.25.0
        id: draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          publish: false
          commitish: ${{ github.sha }}
