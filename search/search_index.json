{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>"},{"location":"#repo-template","title":"Repo Template","text":"<p>A clean template to kickstart your deep learning project \ud83d\ude80\u26a1\ud83d\udd25 Click on Use this template to initialize new repository.</p> <p>Suggestions are always welcome!</p>"},{"location":"#description","title":"Description","text":"<p>This is a template for you to use for any project. It has all the actions set up for you to use.</p>"},{"location":"#for-more-info-check-the-docs","title":"For More info, check the Docs","text":""},{"location":"Reference/repo_template/hello/","title":"Hello","text":""},{"location":"Reference/repo_template/hello/#src.repo_template.hello.Response","title":"Response","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"Reference/repo_template/hello/#src.repo_template.hello.Response.name","title":"name","text":"<pre><code>name: str = Field(\n    ...,\n    title=\"Name\",\n    description=\"The name of the response.\",\n    validation_alias=AliasChoices(\"name\", \"Name\"),\n    frozen=False,\n    deprecated=False,\n)\n</code></pre>"},{"location":"Reference/repo_template/hello/#src.repo_template.hello.Response.content","title":"content","text":"<pre><code>content: str = Field(\n    ...,\n    title=\"Content\",\n    description=\"The content of the response.\",\n    validation_alias=AliasChoices(\"content\", \"Content\"),\n    frozen=False,\n    deprecated=False,\n)\n</code></pre>"},{"location":"Scripts/gen_docs/","title":"Gen docs","text":""},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator","title":"DocsGenerator","text":"<p>               Bases: <code>BaseModel</code></p> <p>DocsGenerator is a class that generates documentation for Python files or classes within a specified source directory.</p> <p>Attributes:</p> Name Type Description <code>source</code> <code>str</code> <p>The source directory or file path.</p> <code>output</code> <code>str</code> <p>The output directory path.</p> <code>exclude</code> <code>str</code> <p>Comma-separated list of folders or files to exclude.</p> <code>mode</code> <code>Literal['file', 'class']</code> <p>Mode of documentation generation, either by file or class.</p> <p>Methods:</p> Name Description <code>gen_docs</code> <p>Generates documentation by file or class.</p> <code>__call__</code> <p>Asynchronously calls the gen_docs method.</p> Using CLI <pre><code>python ./scripts/gen_docs.py --source ./src --output ./docs/Reference --exclude .venv gen_docs\n</code></pre> Using Rye <pre><code>uv run python ./scripts/gen_docs.py\n</code></pre> <p>Methods:</p> Name Description <code>process_file</code> <code>gen_docs</code> <p>This function can generate docs by file or class.</p>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.source","title":"source","text":"<pre><code>source: str = Field(..., frozen=True)\n</code></pre>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.output","title":"output","text":"<pre><code>output: str = Field(..., frozen=True)\n</code></pre>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.exclude","title":"exclude","text":"<pre><code>exclude: str = Field(\n    default=\".venv\",\n    description=\"Exclude the folder or file, it should be separated by comma.\",\n    examples=[\".venv,.git,.idea\"],\n)\n</code></pre>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.mode","title":"mode","text":"<pre><code>mode: Literal[\"file\", \"class\"] = Field(\n    default=\"class\", description=\"Generate docs by file or class.\"\n)\n</code></pre>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.process_file","title":"process_file","text":"<pre><code>process_file(docs_path: Path, file: Path) -&gt; str\n</code></pre> Source code in <code>scripts/gen_docs.py</code> <pre><code>async def process_file(self, docs_path: Path, file: Path) -&gt; str:\n    if file.suffix == \".ipynb\":\n        processed_file = await self.__gen_notebook_docs(docs_path=docs_path, file=file)\n    elif file.suffix == \".py\":\n        processed_file = await self.__gen_single_docs(docs_path=docs_path, file=file)\n    else:\n        processed_file = f\"Unsupported file type: {file.suffix}\"\n        console.log(processed_file)\n    return processed_file\n</code></pre>"},{"location":"Scripts/gen_docs/#scripts.gen_docs.DocsGenerator.gen_docs","title":"gen_docs","text":"<pre><code>gen_docs() -&gt; None\n</code></pre> <p>This function can generate docs by file or class.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the source path is invalid.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; pair_list = {\"./src\": \"./docs/Reference\"}\n&gt;&gt;&gt; for key, value in pair_list.items():\n...     docs_generator = DocsGenerator(source=key, output=value, exclude=\".venv\", mode=\"class\")\n...     asyncio.run(docs_generator.gen_docs())\n</code></pre> Source code in <code>scripts/gen_docs.py</code> <pre><code>async def gen_docs(self) -&gt; None:\n    \"\"\"This function can generate docs by file or class.\n\n    Raises:\n        ValueError: If the source path is invalid.\n\n    Examples:\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; pair_list = {\"./src\": \"./docs/Reference\"}\n        &gt;&gt;&gt; for key, value in pair_list.items():\n        ...     docs_generator = DocsGenerator(source=key, output=value, exclude=\".venv\", mode=\"class\")\n        ...     asyncio.run(docs_generator.gen_docs())\n    \"\"\"\n    with Progress() as progress:\n        task = progress.add_task(\"[green]Generating docs...\")\n        if self._source_path.is_dir():\n            await self.__remove_existing_folder()\n\n            need_to_exclude = [*self.exclude.split(\",\"), \"__init__.py\"]\n            python_files = self._source_path.glob(\"**/*.py\")\n            ipynb_files = self._source_path.glob(\"**/*.ipynb\")\n            files = itertools.chain(python_files, ipynb_files)\n            all_files = [\n                file for file in files if not any(f in file.parts for f in need_to_exclude)\n            ]\n\n            progress.update(\n                task_id=task, description=\"[cyan]Files Found...\", total=len(all_files)\n            )\n\n            for file in all_files:\n                docs_path = Path(\n                    f\"{self._output_path}/{file.parent.relative_to(self._source_path)}\"\n                )\n                processed_file = await self.process_file(docs_path=docs_path, file=file)\n                progress.update(\n                    task_id=task,\n                    advance=1,\n                    description=f\"[cyan]Processing {processed_file}...\",\n                    refresh=True,\n                )\n\n        elif self._source_path.is_file():\n            progress.update(task_id=task, description=\"[cyan]Files Found...\", total=1)\n            processed_file = await self.process_file(\n                docs_path=self._output_path, file=self._source_path\n            )\n            progress.update(\n                task_id=task,\n                advance=1,\n                description=f\"[cyan]Processing {processed_file}...\",\n                refresh=True,\n            )\n        else:\n            raise ValueError(\"Invalid source path\")\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/10/06/this-is-an-example-post-for-blog/","title":"This is an example post for blog","text":"<p>This is an simple example post for blog.</p>"},{"location":"installation/","title":"Installation","text":"<p>This page will guide you through the installation process this project.</p>"},{"location":"installation/#install-dependency-management-tool","title":"Install Dependency Management Tool","text":"uvRyeCondaPIP <p>Install uv</p> <pre><code>make uv-install\n</code></pre> <p>Install Rye</p> <pre><code>make rye-install\n</code></pre> <ul> <li>Please visit miniconda to install miniconda.</li> </ul> <pre><code>conda create -n plotly python=3.9 -y\nconda activate plotly\npip install uv\n</code></pre> <ul> <li>Please visit Python to install Python for using pip.</li> </ul> <pre><code>pip install uv\n</code></pre>"},{"location":"installation/#export-proxy-optional","title":"Export Proxy (Optional)","text":"uvRyeCondaPIP <pre><code>export https_proxy=http://mtkdrone01.mediatek.inc:23984\n</code></pre> <pre><code>export https_proxy=http://mtkdrone01.mediatek.inc:23984\n</code></pre> <pre><code>export https_proxy=http://mtkdrone01.mediatek.inc:23984\n</code></pre> <pre><code>export https_proxy=http://mtkdrone01.mediatek.inc:23984\n</code></pre>"},{"location":"installation/#installsetup-dependencies","title":"Install/Setup Dependencies","text":"uvRyeCondaPIP <pre><code>uv sync\n</code></pre> <pre><code>rye sync\n</code></pre> <pre><code>uv pip sync pyproject.toml\n</code></pre> <pre><code>uv pip sync pyproject.toml\n</code></pre> <ul> <li>Once you have done the above steps, you can run the following commands to start the application.</li> <li>If your environment is messed up, you can run <code>uv sync</code> again to fix it.</li> </ul>"}]}